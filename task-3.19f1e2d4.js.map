{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","canProcess","setTimeout","id","time","logError","console","warn","logSuccess","log","amount","then","catch"],"mappings":";AAKA,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChBC,MAAAA,EAAQR,EAA0B,IAAK,KAEtC,OAAA,IAAIS,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAaT,KAAKE,SAAW,GACnCQ,WAAW,KACLD,EACFF,EAAQ,CAAEI,GAAIP,EAAYO,GAAIC,KAAMP,IAEpCG,EAAOJ,EAAYO,KAEpBN,MAIDQ,EAAWF,IACfG,QAAQC,qCAAqCJ,+BAGzCK,EAAa,EAAGL,GAAAA,EAAIC,KAAAA,MACxBE,QAAQG,mBAAmBN,kBAAmBC,QAKhDT,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,MAC/BC,KAAKH,GACLI,MAAMP,GAETV,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,MAC/BC,KAAKH,GACLI,MAAMP,GAETV,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,KAC/BC,KAAKH,GACLI,MAAMP,GAETV,EAAgB,CAAEQ,GAAI,GAAIO,OAAQ,MAC/BC,KAAKH,GACLI,MAAMP","file":"task-3.19f1e2d4.js","sourceRoot":"..\\src","sourcesContent":["/* Taks-03\r\nПерепиши функцию makeTransaction() так,\r\n чтобы она не использовала callback-функции onSuccess и onError, \r\n а принимала всего один параметр transaction и возвращала промис.\r\n*/\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const canProcess = Math.random() > 0.3;\r\n    setTimeout(() => {\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n"]}